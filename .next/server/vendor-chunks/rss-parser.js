"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rss-parser";
exports.ids = ["vendor-chunks/rss-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/rss-parser/index.js":
/*!******************************************!*\
  !*** ./node_modules/rss-parser/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib/parser */ \"(rsc)/./node_modules/rss-parser/lib/parser.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSx5R0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYWN0LWNoZWNrZXIvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9pbmRleC5qcz9lMGI1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9wYXJzZXInKTtcblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/fields.js":
/*!***********************************************!*\
  !*** ./node_modules/rss-parser/lib/fields.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nconst fields = module.exports = {};\nfields.feed = [\n    [\n        \"author\",\n        \"creator\"\n    ],\n    [\n        \"dc:publisher\",\n        \"publisher\"\n    ],\n    [\n        \"dc:creator\",\n        \"creator\"\n    ],\n    [\n        \"dc:source\",\n        \"source\"\n    ],\n    [\n        \"dc:title\",\n        \"title\"\n    ],\n    [\n        \"dc:type\",\n        \"type\"\n    ],\n    \"title\",\n    \"description\",\n    \"author\",\n    \"pubDate\",\n    \"webMaster\",\n    \"managingEditor\",\n    \"generator\",\n    \"link\",\n    \"language\",\n    \"copyright\",\n    \"lastBuildDate\",\n    \"docs\",\n    \"generator\",\n    \"ttl\",\n    \"rating\",\n    \"skipHours\",\n    \"skipDays\"\n];\nfields.item = [\n    [\n        \"author\",\n        \"creator\"\n    ],\n    [\n        \"dc:creator\",\n        \"creator\"\n    ],\n    [\n        \"dc:date\",\n        \"date\"\n    ],\n    [\n        \"dc:language\",\n        \"language\"\n    ],\n    [\n        \"dc:rights\",\n        \"rights\"\n    ],\n    [\n        \"dc:source\",\n        \"source\"\n    ],\n    [\n        \"dc:title\",\n        \"title\"\n    ],\n    \"title\",\n    \"link\",\n    \"pubDate\",\n    \"author\",\n    \"summary\",\n    [\n        \"content:encoded\",\n        \"content:encoded\",\n        {\n            includeSnippet: true\n        }\n    ],\n    \"enclosure\",\n    \"dc:creator\",\n    \"dc:date\",\n    \"comments\"\n];\nvar mapItunesField = function(f) {\n    return [\n        \"itunes:\" + f,\n        f\n    ];\n};\nfields.podcastFeed = [\n    \"author\",\n    \"subtitle\",\n    \"summary\",\n    \"explicit\"\n].map(mapItunesField);\nfields.podcastItem = [\n    \"author\",\n    \"subtitle\",\n    \"summary\",\n    \"explicit\",\n    \"duration\",\n    \"image\",\n    \"episode\",\n    \"image\",\n    \"season\",\n    \"keywords\",\n    \"episodeType\"\n].map(mapItunesField);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvZmllbGRzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxTQUFTQyxPQUFPQyxPQUFPLEdBQUcsQ0FBQztBQUVqQ0YsT0FBT0csSUFBSSxHQUFHO0lBQ1o7UUFBQztRQUFVO0tBQVU7SUFDckI7UUFBQztRQUFnQjtLQUFZO0lBQzdCO1FBQUM7UUFBYztLQUFVO0lBQ3pCO1FBQUM7UUFBYTtLQUFTO0lBQ3ZCO1FBQUM7UUFBWTtLQUFRO0lBQ3JCO1FBQUM7UUFBVztLQUFPO0lBQ25CO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUVESCxPQUFPSSxJQUFJLEdBQUc7SUFDWjtRQUFDO1FBQVU7S0FBVTtJQUNyQjtRQUFDO1FBQWM7S0FBVTtJQUN6QjtRQUFDO1FBQVc7S0FBTztJQUNuQjtRQUFDO1FBQWU7S0FBVztJQUMzQjtRQUFDO1FBQWE7S0FBUztJQUN2QjtRQUFDO1FBQWE7S0FBUztJQUN2QjtRQUFDO1FBQVk7S0FBUTtJQUNyQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7UUFBQztRQUFtQjtRQUFtQjtZQUFDQyxnQkFBZ0I7UUFBSTtLQUFFO0lBQzlEO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxJQUFJQyxpQkFBaUIsU0FBU0MsQ0FBQztJQUM3QixPQUFPO1FBQUMsWUFBWUE7UUFBR0E7S0FBRTtBQUMzQjtBQUVBUCxPQUFPUSxXQUFXLEdBQUc7SUFDbkI7SUFDQTtJQUNBO0lBQ0E7Q0FDRCxDQUFFQyxHQUFHLENBQUNIO0FBRVBOLE9BQU9VLFdBQVcsR0FBRztJQUNuQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0QsQ0FBRUQsR0FBRyxDQUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZhY3QtY2hlY2tlci8uL25vZGVfbW9kdWxlcy9yc3MtcGFyc2VyL2xpYi9maWVsZHMuanM/MTFhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmaWVsZHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5maWVsZHMuZmVlZCA9IFtcbiAgWydhdXRob3InLCAnY3JlYXRvciddLFxuICBbJ2RjOnB1Ymxpc2hlcicsICdwdWJsaXNoZXInXSxcbiAgWydkYzpjcmVhdG9yJywgJ2NyZWF0b3InXSxcbiAgWydkYzpzb3VyY2UnLCAnc291cmNlJ10sXG4gIFsnZGM6dGl0bGUnLCAndGl0bGUnXSxcbiAgWydkYzp0eXBlJywgJ3R5cGUnXSxcbiAgJ3RpdGxlJyxcbiAgJ2Rlc2NyaXB0aW9uJyxcbiAgJ2F1dGhvcicsXG4gICdwdWJEYXRlJyxcbiAgJ3dlYk1hc3RlcicsXG4gICdtYW5hZ2luZ0VkaXRvcicsXG4gICdnZW5lcmF0b3InLFxuICAnbGluaycsXG4gICdsYW5ndWFnZScsXG4gICdjb3B5cmlnaHQnLFxuICAnbGFzdEJ1aWxkRGF0ZScsXG4gICdkb2NzJyxcbiAgJ2dlbmVyYXRvcicsXG4gICd0dGwnLFxuICAncmF0aW5nJyxcbiAgJ3NraXBIb3VycycsXG4gICdza2lwRGF5cycsXG5dO1xuXG5maWVsZHMuaXRlbSA9IFtcbiAgWydhdXRob3InLCAnY3JlYXRvciddLFxuICBbJ2RjOmNyZWF0b3InLCAnY3JlYXRvciddLFxuICBbJ2RjOmRhdGUnLCAnZGF0ZSddLFxuICBbJ2RjOmxhbmd1YWdlJywgJ2xhbmd1YWdlJ10sXG4gIFsnZGM6cmlnaHRzJywgJ3JpZ2h0cyddLFxuICBbJ2RjOnNvdXJjZScsICdzb3VyY2UnXSxcbiAgWydkYzp0aXRsZScsICd0aXRsZSddLFxuICAndGl0bGUnLFxuICAnbGluaycsXG4gICdwdWJEYXRlJyxcbiAgJ2F1dGhvcicsXG4gICdzdW1tYXJ5JyxcbiAgWydjb250ZW50OmVuY29kZWQnLCAnY29udGVudDplbmNvZGVkJywge2luY2x1ZGVTbmlwcGV0OiB0cnVlfV0sXG4gICdlbmNsb3N1cmUnLFxuICAnZGM6Y3JlYXRvcicsXG4gICdkYzpkYXRlJyxcbiAgJ2NvbW1lbnRzJyxcbl07XG5cbnZhciBtYXBJdHVuZXNGaWVsZCA9IGZ1bmN0aW9uKGYpIHtcbiAgcmV0dXJuIFsnaXR1bmVzOicgKyBmLCBmXTtcbn1cblxuZmllbGRzLnBvZGNhc3RGZWVkID0gKFtcbiAgJ2F1dGhvcicsXG4gICdzdWJ0aXRsZScsXG4gICdzdW1tYXJ5JyxcbiAgJ2V4cGxpY2l0J1xuXSkubWFwKG1hcEl0dW5lc0ZpZWxkKTtcblxuZmllbGRzLnBvZGNhc3RJdGVtID0gKFtcbiAgJ2F1dGhvcicsXG4gICdzdWJ0aXRsZScsXG4gICdzdW1tYXJ5JyxcbiAgJ2V4cGxpY2l0JyxcbiAgJ2R1cmF0aW9uJyxcbiAgJ2ltYWdlJyxcbiAgJ2VwaXNvZGUnLFxuICAnaW1hZ2UnLFxuICAnc2Vhc29uJyxcbiAgJ2tleXdvcmRzJyxcbiAgJ2VwaXNvZGVUeXBlJ1xuXSkubWFwKG1hcEl0dW5lc0ZpZWxkKTtcblxuIl0sIm5hbWVzIjpbImZpZWxkcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJmZWVkIiwiaXRlbSIsImluY2x1ZGVTbmlwcGV0IiwibWFwSXR1bmVzRmllbGQiLCJmIiwicG9kY2FzdEZlZWQiLCJtYXAiLCJwb2RjYXN0SXRlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/fields.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/parser.js":
/*!***********************************************!*\
  !*** ./node_modules/rss-parser/lib/parser.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst fields = __webpack_require__(/*! ./fields */ \"(rsc)/./node_modules/rss-parser/lib/fields.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/rss-parser/lib/utils.js\");\nconst DEFAULT_HEADERS = {\n    \"User-Agent\": \"rss-parser\",\n    \"Accept\": \"application/rss+xml\"\n};\nconst DEFAULT_MAX_REDIRECTS = 5;\nconst DEFAULT_TIMEOUT = 60000;\nclass Parser {\n    constructor(options = {}){\n        options.headers = options.headers || {};\n        options.xml2js = options.xml2js || {};\n        options.customFields = options.customFields || {};\n        options.customFields.item = options.customFields.item || [];\n        options.customFields.feed = options.customFields.feed || [];\n        options.requestOptions = options.requestOptions || {};\n        if (!options.maxRedirects) options.maxRedirects = DEFAULT_MAX_REDIRECTS;\n        if (!options.timeout) options.timeout = DEFAULT_TIMEOUT;\n        this.options = options;\n        this.xmlParser = new xml2js.Parser(this.options.xml2js);\n    }\n    parseString(xml, callback) {\n        let prom = new Promise((resolve, reject)=>{\n            this.xmlParser.parseString(xml, (err, result)=>{\n                if (err) return reject(err);\n                if (!result) {\n                    return reject(new Error(\"Unable to parse XML.\"));\n                }\n                let feed = null;\n                if (result.feed) {\n                    feed = this.buildAtomFeed(result);\n                } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/^2/)) {\n                    feed = this.buildRSS2(result);\n                } else if (result[\"rdf:RDF\"]) {\n                    feed = this.buildRSS1(result);\n                } else if (result.rss && result.rss.$ && result.rss.$.version && result.rss.$.version.match(/0\\.9/)) {\n                    feed = this.buildRSS0_9(result);\n                } else if (result.rss && this.options.defaultRSS) {\n                    switch(this.options.defaultRSS){\n                        case 0.9:\n                            feed = this.buildRSS0_9(result);\n                            break;\n                        case 1:\n                            feed = this.buildRSS1(result);\n                            break;\n                        case 2:\n                            feed = this.buildRSS2(result);\n                            break;\n                        default:\n                            return reject(new Error(\"default RSS version not recognized.\"));\n                    }\n                } else {\n                    return reject(new Error(\"Feed not recognized as RSS 1 or 2.\"));\n                }\n                resolve(feed);\n            });\n        });\n        prom = utils.maybePromisify(callback, prom);\n        return prom;\n    }\n    parseURL(feedUrl, callback, redirectCount = 0) {\n        let xml = \"\";\n        let get = feedUrl.indexOf(\"https\") === 0 ? https.get : http.get;\n        let urlParts = url.parse(feedUrl);\n        let headers = Object.assign({}, DEFAULT_HEADERS, this.options.headers);\n        let timeout = null;\n        let prom = new Promise((resolve, reject)=>{\n            const requestOpts = Object.assign({\n                headers\n            }, urlParts, this.options.requestOptions);\n            let req = get(requestOpts, (res)=>{\n                if (this.options.maxRedirects && res.statusCode >= 300 && res.statusCode < 400 && res.headers[\"location\"]) {\n                    if (redirectCount === this.options.maxRedirects) {\n                        return reject(new Error(\"Too many redirects\"));\n                    } else {\n                        const newLocation = url.resolve(feedUrl, res.headers[\"location\"]);\n                        return this.parseURL(newLocation, null, redirectCount + 1).then(resolve, reject);\n                    }\n                } else if (res.statusCode >= 300) {\n                    return reject(new Error(\"Status code \" + res.statusCode));\n                }\n                let encoding = utils.getEncodingFromContentType(res.headers[\"content-type\"]);\n                res.setEncoding(encoding);\n                res.on(\"data\", (chunk)=>{\n                    xml += chunk;\n                });\n                res.on(\"end\", ()=>{\n                    return this.parseString(xml).then(resolve, reject);\n                });\n            });\n            req.on(\"error\", reject);\n            timeout = setTimeout(()=>{\n                return reject(new Error(\"Request timed out after \" + this.options.timeout + \"ms\"));\n            }, this.options.timeout);\n        }).then((data)=>{\n            clearTimeout(timeout);\n            return Promise.resolve(data);\n        }, (e)=>{\n            clearTimeout(timeout);\n            return Promise.reject(e);\n        });\n        prom = utils.maybePromisify(callback, prom);\n        return prom;\n    }\n    buildAtomFeed(xmlObj) {\n        let feed = {\n            items: []\n        };\n        utils.copyFromXML(xmlObj.feed, feed, this.options.customFields.feed);\n        if (xmlObj.feed.link) {\n            feed.link = utils.getLink(xmlObj.feed.link, \"alternate\", 0);\n            feed.feedUrl = utils.getLink(xmlObj.feed.link, \"self\", 1);\n        }\n        if (xmlObj.feed.title) {\n            let title = xmlObj.feed.title[0] || \"\";\n            if (title._) title = title._;\n            if (title) feed.title = title;\n        }\n        if (xmlObj.feed.updated) {\n            feed.lastBuildDate = xmlObj.feed.updated[0];\n        }\n        feed.items = (xmlObj.feed.entry || []).map((entry)=>this.parseItemAtom(entry));\n        return feed;\n    }\n    parseItemAtom(entry) {\n        let item = {};\n        utils.copyFromXML(entry, item, this.options.customFields.item);\n        if (entry.title) {\n            let title = entry.title[0] || \"\";\n            if (title._) title = title._;\n            if (title) item.title = title;\n        }\n        if (entry.link && entry.link.length) {\n            item.link = utils.getLink(entry.link, \"alternate\", 0);\n        }\n        if (entry.published && entry.published.length && entry.published[0].length) item.pubDate = new Date(entry.published[0]).toISOString();\n        if (!item.pubDate && entry.updated && entry.updated.length && entry.updated[0].length) item.pubDate = new Date(entry.updated[0]).toISOString();\n        if (entry.author && entry.author.length && entry.author[0].name && entry.author[0].name.length) item.author = entry.author[0].name[0];\n        if (entry.content && entry.content.length) {\n            item.content = utils.getContent(entry.content[0]);\n            item.contentSnippet = utils.getSnippet(item.content);\n        }\n        if (entry.summary && entry.summary.length) {\n            item.summary = utils.getContent(entry.summary[0]);\n        }\n        if (entry.id) {\n            item.id = entry.id[0];\n        }\n        this.setISODate(item);\n        return item;\n    }\n    buildRSS0_9(xmlObj) {\n        var channel = xmlObj.rss.channel[0];\n        var items = channel.item;\n        return this.buildRSS(channel, items);\n    }\n    buildRSS1(xmlObj) {\n        xmlObj = xmlObj[\"rdf:RDF\"];\n        let channel = xmlObj.channel[0];\n        let items = xmlObj.item;\n        return this.buildRSS(channel, items);\n    }\n    buildRSS2(xmlObj) {\n        let channel = xmlObj.rss.channel[0];\n        let items = channel.item;\n        let feed = this.buildRSS(channel, items);\n        if (xmlObj.rss.$ && xmlObj.rss.$[\"xmlns:itunes\"]) {\n            this.decorateItunes(feed, channel);\n        }\n        return feed;\n    }\n    buildRSS(channel, items) {\n        items = items || [];\n        let feed = {\n            items: []\n        };\n        let feedFields = fields.feed.concat(this.options.customFields.feed);\n        let itemFields = fields.item.concat(this.options.customFields.item);\n        if (channel[\"atom:link\"] && channel[\"atom:link\"][0] && channel[\"atom:link\"][0].$) {\n            feed.feedUrl = channel[\"atom:link\"][0].$.href;\n        }\n        if (channel.image && channel.image[0] && channel.image[0].url) {\n            feed.image = {};\n            let image = channel.image[0];\n            if (image.link) feed.image.link = image.link[0];\n            if (image.url) feed.image.url = image.url[0];\n            if (image.title) feed.image.title = image.title[0];\n            if (image.width) feed.image.width = image.width[0];\n            if (image.height) feed.image.height = image.height[0];\n        }\n        const paginationLinks = this.generatePaginationLinks(channel);\n        if (Object.keys(paginationLinks).length) {\n            feed.paginationLinks = paginationLinks;\n        }\n        utils.copyFromXML(channel, feed, feedFields);\n        feed.items = items.map((xmlItem)=>this.parseItemRss(xmlItem, itemFields));\n        return feed;\n    }\n    parseItemRss(xmlItem, itemFields) {\n        let item = {};\n        utils.copyFromXML(xmlItem, item, itemFields);\n        if (xmlItem.enclosure) {\n            item.enclosure = xmlItem.enclosure[0].$;\n        }\n        if (xmlItem.description) {\n            item.content = utils.getContent(xmlItem.description[0]);\n            item.contentSnippet = utils.getSnippet(item.content);\n        }\n        if (xmlItem.guid) {\n            item.guid = xmlItem.guid[0];\n            if (item.guid._) item.guid = item.guid._;\n        }\n        if (xmlItem.$ && xmlItem.$[\"rdf:about\"]) {\n            item[\"rdf:about\"] = xmlItem.$[\"rdf:about\"];\n        }\n        if (xmlItem.category) item.categories = xmlItem.category;\n        this.setISODate(item);\n        return item;\n    }\n    /**\n   * Add iTunes specific fields from XML to extracted JSON\n   *\n   * @access public\n   * @param {object} feed extracted\n   * @param {object} channel parsed XML\n   */ decorateItunes(feed, channel) {\n        let items = channel.item || [];\n        let categories = [];\n        feed.itunes = {};\n        if (channel[\"itunes:owner\"]) {\n            let owner = {};\n            if (channel[\"itunes:owner\"][0][\"itunes:name\"]) {\n                owner.name = channel[\"itunes:owner\"][0][\"itunes:name\"][0];\n            }\n            if (channel[\"itunes:owner\"][0][\"itunes:email\"]) {\n                owner.email = channel[\"itunes:owner\"][0][\"itunes:email\"][0];\n            }\n            feed.itunes.owner = owner;\n        }\n        if (channel[\"itunes:image\"]) {\n            let image;\n            let hasImageHref = channel[\"itunes:image\"][0] && channel[\"itunes:image\"][0].$ && channel[\"itunes:image\"][0].$.href;\n            image = hasImageHref ? channel[\"itunes:image\"][0].$.href : null;\n            if (image) {\n                feed.itunes.image = image;\n            }\n        }\n        if (channel[\"itunes:category\"]) {\n            const categoriesWithSubs = channel[\"itunes:category\"].map((category)=>{\n                return {\n                    name: category && category.$ && category.$.text,\n                    subs: category[\"itunes:category\"] ? category[\"itunes:category\"].map((subcategory)=>({\n                            name: subcategory && subcategory.$ && subcategory.$.text\n                        })) : null\n                };\n            });\n            feed.itunes.categories = categoriesWithSubs.map((category)=>category.name);\n            feed.itunes.categoriesWithSubs = categoriesWithSubs;\n        }\n        if (channel[\"itunes:keywords\"]) {\n            if (channel[\"itunes:keywords\"].length > 1) {\n                feed.itunes.keywords = channel[\"itunes:keywords\"].map((keyword)=>keyword && keyword.$ && keyword.$.text);\n            } else {\n                let keywords = channel[\"itunes:keywords\"][0];\n                if (keywords && typeof keywords._ === \"string\") {\n                    keywords = keywords._;\n                }\n                if (keywords && keywords.$ && keywords.$.text) {\n                    feed.itunes.keywords = keywords.$.text.split(\",\");\n                } else if (typeof keywords === \"string\") {\n                    feed.itunes.keywords = keywords.split(\",\");\n                }\n            }\n        }\n        utils.copyFromXML(channel, feed.itunes, fields.podcastFeed);\n        items.forEach((item, index)=>{\n            let entry = feed.items[index];\n            entry.itunes = {};\n            utils.copyFromXML(item, entry.itunes, fields.podcastItem);\n            let image = item[\"itunes:image\"];\n            if (image && image[0] && image[0].$ && image[0].$.href) {\n                entry.itunes.image = image[0].$.href;\n            }\n        });\n    }\n    setISODate(item) {\n        let date = item.pubDate || item.date;\n        if (date) {\n            try {\n                item.isoDate = new Date(date.trim()).toISOString();\n            } catch (e) {\n            // Ignore bad date format\n            }\n        }\n    }\n    /**\n   * Generates a pagination object where the rel attribute is the key and href attribute is the value\n   *  { self: 'self-url', first: 'first-url', ...  }\n   *\n   * @access private\n   * @param {Object} channel parsed XML\n   * @returns {Object}\n   */ generatePaginationLinks(channel) {\n        if (!channel[\"atom:link\"]) {\n            return {};\n        }\n        const paginationRelAttributes = [\n            \"self\",\n            \"first\",\n            \"next\",\n            \"prev\",\n            \"last\"\n        ];\n        return channel[\"atom:link\"].reduce((paginationLinks, link)=>{\n            if (!link.$ || !paginationRelAttributes.includes(link.$.rel)) {\n                return paginationLinks;\n            }\n            paginationLinks[link.$.rel] = link.$.href;\n            return paginationLinks;\n        }, {});\n    }\n}\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUcsTUFBTUgsbUJBQU9BLENBQUM7QUFFcEIsTUFBTUksU0FBU0osbUJBQU9BLENBQUM7QUFDdkIsTUFBTUssUUFBUUwsbUJBQU9BLENBQUM7QUFFdEIsTUFBTU0sa0JBQWtCO0lBQ3RCLGNBQWM7SUFDZCxVQUFVO0FBQ1o7QUFDQSxNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsa0JBQWtCO0FBRXhCLE1BQU1DO0lBQ0pDLFlBQVlDLFVBQVEsQ0FBQyxDQUFDLENBQUU7UUFDdEJBLFFBQVFDLE9BQU8sR0FBR0QsUUFBUUMsT0FBTyxJQUFJLENBQUM7UUFDdENELFFBQVFULE1BQU0sR0FBR1MsUUFBUVQsTUFBTSxJQUFJLENBQUM7UUFDcENTLFFBQVFFLFlBQVksR0FBR0YsUUFBUUUsWUFBWSxJQUFJLENBQUM7UUFDaERGLFFBQVFFLFlBQVksQ0FBQ0MsSUFBSSxHQUFHSCxRQUFRRSxZQUFZLENBQUNDLElBQUksSUFBSSxFQUFFO1FBQzNESCxRQUFRRSxZQUFZLENBQUNFLElBQUksR0FBR0osUUFBUUUsWUFBWSxDQUFDRSxJQUFJLElBQUksRUFBRTtRQUMzREosUUFBUUssY0FBYyxHQUFHTCxRQUFRSyxjQUFjLElBQUksQ0FBQztRQUNwRCxJQUFJLENBQUNMLFFBQVFNLFlBQVksRUFBRU4sUUFBUU0sWUFBWSxHQUFHVjtRQUNsRCxJQUFJLENBQUNJLFFBQVFPLE9BQU8sRUFBRVAsUUFBUU8sT0FBTyxHQUFHVjtRQUN4QyxJQUFJLENBQUNHLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNRLFNBQVMsR0FBRyxJQUFJakIsT0FBT08sTUFBTSxDQUFDLElBQUksQ0FBQ0UsT0FBTyxD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QUFFLENBQUNqRSxDQUFDLENBQUNnRSxJQUFJO1lBQ3RDO1FBQ0Y7SUFDRjtJQUVBUCxXQUFXM0UsSUFBSSxFQUFFO1FBQ2YsSUFBSStHLE9BQU8vRyxLQUFLZ0UsT0FBTyxJQUFJaEUsS0FBSytHLElBQUk7UUFDcEMsSUFBSUEsTUFBTTtZQUNSLElBQUk7Z0JBQ0YvRyxLQUFLZ0gsT0FBTyxHQUFHLElBQUkvQyxLQUFLOEMsS0FBS0UsSUFBSSxJQUFJL0MsV0FBVztZQUNsRCxFQUFFLE9BQU9qQixHQUFHO1lBQ1YseUJBQXlCO1lBQzNCO1FBQ0Y7SUFDRjtJQUVBOzs7Ozs7O0dBT0MsR0FDRHNDLHdCQUF3QlgsT0FBTyxFQUFFO1FBQy9CLElBQUksQ0FBQ0EsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUN6QixPQUFPLENBQUM7UUFDVjtRQUNBLE1BQU1zQywwQkFBMEI7WUFBQztZQUFRO1lBQVM7WUFBUTtZQUFRO1NBQU87UUFFekUsT0FBT3RDLE9BQU8sQ0FBQyxZQUFZLENBQUN1QyxNQUFNLENBQUMsQ0FBQzdCLGlCQUFpQmpDO1lBQ25ELElBQUksQ0FBQ0EsS0FBS25DLENBQUMsSUFBSSxDQUFDZ0csd0JBQXdCRSxRQUFRLENBQUMvRCxLQUFLbkMsQ0FBQyxDQUFDbUcsR0FBRyxHQUFHO2dCQUM1RCxPQUFPL0I7WUFDVDtZQUNBQSxlQUFlLENBQUNqQyxLQUFLbkMsQ0FBQyxDQUFDbUcsR0FBRyxDQUFDLEdBQUdoRSxLQUFLbkMsQ0FBQyxDQUFDZ0UsSUFBSTtZQUN6QyxPQUFPSTtRQUNULEdBQUcsQ0FBQztJQUNOO0FBQ0Y7QUFFQWdDLE9BQU9DLE9BQU8sR0FBRzVIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFjdC1jaGVja2VyLy4vbm9kZV9tb2R1bGVzL3Jzcy1wYXJzZXIvbGliL3BhcnNlci5qcz9mZDM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbmNvbnN0IHhtbDJqcyA9IHJlcXVpcmUoJ3htbDJqcycpO1xuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbmNvbnN0IGZpZWxkcyA9IHJlcXVpcmUoJy4vZmllbGRzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuY29uc3QgREVGQVVMVF9IRUFERVJTID0ge1xuICAnVXNlci1BZ2VudCc6ICdyc3MtcGFyc2VyJyxcbiAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9yc3MreG1sJyxcbn1cbmNvbnN0IERFRkFVTFRfTUFYX1JFRElSRUNUUyA9IDU7XG5jb25zdCBERUZBVUxUX1RJTUVPVVQgPSA2MDAwMDtcblxuY2xhc3MgUGFyc2VyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucz17fSkge1xuICAgIG9wdGlvbnMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcbiAgICBvcHRpb25zLnhtbDJqcyA9IG9wdGlvbnMueG1sMmpzIHx8IHt9O1xuICAgIG9wdGlvbnMuY3VzdG9tRmllbGRzID0gb3B0aW9ucy5jdXN0b21GaWVsZHMgfHwge307XG4gICAgb3B0aW9ucy5jdXN0b21GaWVsZHMuaXRlbSA9IG9wdGlvbnMuY3VzdG9tRmllbGRzLml0ZW0gfHwgW107XG4gICAgb3B0aW9ucy5jdXN0b21GaWVsZHMuZmVlZCA9IG9wdGlvbnMuY3VzdG9tRmllbGRzLmZlZWQgfHwgW107XG4gICAgb3B0aW9ucy5yZXF1ZXN0T3B0aW9ucyA9IG9wdGlvbnMucmVxdWVzdE9wdGlvbnMgfHwge307XG4gICAgaWYgKCFvcHRpb25zLm1heFJlZGlyZWN0cykgb3B0aW9ucy5tYXhSZWRpcmVjdHMgPSBERUZBVUxUX01BWF9SRURJUkVDVFM7XG4gICAgaWYgKCFvcHRpb25zLnRpbWVvdXQpIG9wdGlvbnMudGltZW91dCA9IERFRkFVTFRfVElNRU9VVDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMueG1sUGFyc2VyID0gbmV3IHhtbDJqcy5QYXJzZXIodGhpcy5vcHRpb25zLnhtbDJqcyk7XG4gIH1cblxuICBwYXJzZVN0cmluZyh4bWwsIGNhbGxiYWNrKSB7XG4gICAgbGV0IHByb20gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnhtbFBhcnNlci5wYXJzZVN0cmluZyh4bWwsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBYTUwuJykpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmZWVkID0gbnVsbDtcbiAgICAgICAgaWYgKHJlc3VsdC5mZWVkKSB7XG4gICAgICAgICAgZmVlZCA9IHRoaXMuYnVpbGRBdG9tRmVlZChyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5yc3MgJiYgcmVzdWx0LnJzcy4kICYmIHJlc3VsdC5yc3MuJC52ZXJzaW9uICYmIHJlc3VsdC5yc3MuJC52ZXJzaW9uLm1hdGNoKC9eMi8pKSB7XG4gICAgICAgICAgZmVlZCA9IHRoaXMuYnVpbGRSU1MyKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0WydyZGY6UkRGJ10pIHtcbiAgICAgICAgICBmZWVkID0gdGhpcy5idWlsZFJTUzEocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQucnNzICYmIHJlc3VsdC5yc3MuJCAmJiByZXN1bHQucnNzLiQudmVyc2lvbiAmJiByZXN1bHQucnNzLiQudmVyc2lvbi5tYXRjaCgvMFxcLjkvKSkge1xuICAgICAgICAgIGZlZWQgPSB0aGlzLmJ1aWxkUlNTMF85KHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnJzcyAmJiB0aGlzLm9wdGlvbnMuZGVmYXVsdFJTUykge1xuICAgICAgICAgIHN3aXRjaCh0aGlzLm9wdGlvbnMuZGVmYXVsdFJTUykge1xuICAgICAgICAgICAgY2FzZSAwLjk6XG4gICAgICAgICAgICAgIGZlZWQgPSB0aGlzLmJ1aWxkUlNTMF85KHJlc3VsdCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBmZWVkID0gdGhpcy5idWlsZFJTUzEocmVzdWx0KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIGZlZWQgPSB0aGlzLmJ1aWxkUlNTMihyZXN1bHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKFwiZGVmYXVsdCBSU1MgdmVyc2lvbiBub3QgcmVjb2duaXplZC5cIikpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKFwiRmVlZCBub3QgcmVjb2duaXplZCBhcyBSU1MgMSBvciAyLlwiKSlcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKGZlZWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcHJvbSA9IHV0aWxzLm1heWJlUHJvbWlzaWZ5KGNhbGxiYWNrLCBwcm9tKTtcbiAgICByZXR1cm4gcHJvbTtcbiAgfVxuXG4gIHBhcnNlVVJMKGZlZWRVcmwsIGNhbGxiYWNrLCByZWRpcmVjdENvdW50PTApIHtcbiAgICBsZXQgeG1sID0gJyc7XG4gICAgbGV0IGdldCA9IGZlZWRVcmwuaW5kZXhPZignaHR0cHMnKSA9PT0gMCA/IGh0dHBzLmdldCA6IGh0dHAuZ2V0O1xuICAgIGxldCB1cmxQYXJ0cyA9IHVybC5wYXJzZShmZWVkVXJsKTtcbiAgICBsZXQgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfSEVBREVSUywgdGhpcy5vcHRpb25zLmhlYWRlcnMpO1xuICAgIGxldCB0aW1lb3V0ID0gbnVsbDtcbiAgICBsZXQgcHJvbSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3RPcHRzID0gT2JqZWN0LmFzc2lnbih7aGVhZGVyc30sIHVybFBhcnRzLCB0aGlzLm9wdGlvbnMucmVxdWVzdE9wdGlvbnMpO1xuICAgICAgbGV0IHJlcSA9IGdldChyZXF1ZXN0T3B0cywgKHJlcykgPT4ge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1heFJlZGlyZWN0cyAmJiByZXMuc3RhdHVzQ29kZSA+PSAzMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCA0MDAgJiYgcmVzLmhlYWRlcnNbJ2xvY2F0aW9uJ10pIHtcbiAgICAgICAgICBpZiAocmVkaXJlY3RDb3VudCA9PT0gdGhpcy5vcHRpb25zLm1heFJlZGlyZWN0cykge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJUb28gbWFueSByZWRpcmVjdHNcIikpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBuZXdMb2NhdGlvbiA9IHVybC5yZXNvbHZlKGZlZWRVcmwsIHJlcy5oZWFkZXJzWydsb2NhdGlvbiddKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVVJMKG5ld0xvY2F0aW9uLCBudWxsLCByZWRpcmVjdENvdW50ICsgMSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXMuc3RhdHVzQ29kZSA+PSAzMDApIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIlN0YXR1cyBjb2RlIFwiICsgcmVzLnN0YXR1c0NvZGUpKVxuICAgICAgICB9XG4gICAgICAgIGxldCBlbmNvZGluZyA9IHV0aWxzLmdldEVuY29kaW5nRnJvbUNvbnRlbnRUeXBlKHJlcy5oZWFkZXJzWydjb250ZW50LXR5cGUnXSk7XG4gICAgICAgIHJlcy5zZXRFbmNvZGluZyhlbmNvZGluZyk7XG4gICAgICAgIHJlcy5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgICAgICAgIHhtbCArPSBjaHVuaztcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlU3RyaW5nKHhtbCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICByZXEub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJSZXF1ZXN0IHRpbWVkIG91dCBhZnRlciBcIiArIHRoaXMub3B0aW9ucy50aW1lb3V0ICsgXCJtc1wiKSk7XG4gICAgICB9LCB0aGlzLm9wdGlvbnMudGltZW91dCk7XG4gICAgfSkudGhlbihkYXRhID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgfSwgZSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgfSk7XG4gICAgcHJvbSA9IHV0aWxzLm1heWJlUHJvbWlzaWZ5KGNhbGxiYWNrLCBwcm9tKTtcbiAgICByZXR1cm4gcHJvbTtcbiAgfVxuXG4gIGJ1aWxkQXRvbUZlZWQoeG1sT2JqKSB7XG4gICAgbGV0IGZlZWQgPSB7aXRlbXM6IFtdfTtcbiAgICB1dGlscy5jb3B5RnJvbVhNTCh4bWxPYmouZmVlZCwgZmVlZCwgdGhpcy5vcHRpb25zLmN1c3RvbUZpZWxkcy5mZWVkKTtcbiAgICBpZiAoeG1sT2JqLmZlZWQubGluaykge1xuICAgICAgZmVlZC5saW5rID0gdXRpbHMuZ2V0TGluayh4bWxPYmouZmVlZC5saW5rLCAnYWx0ZXJuYXRlJywgMCk7XG4gICAgICBmZWVkLmZlZWRVcmwgPSB1dGlscy5nZXRMaW5rKHhtbE9iai5mZWVkLmxpbmssICdzZWxmJywgMSk7XG4gICAgfVxuICAgIGlmICh4bWxPYmouZmVlZC50aXRsZSkge1xuICAgICAgbGV0IHRpdGxlID0geG1sT2JqLmZlZWQudGl0bGVbMF0gfHwgJyc7XG4gICAgICBpZiAodGl0bGUuXykgdGl0bGUgPSB0aXRsZS5fXG4gICAgICBpZiAodGl0bGUpIGZlZWQudGl0bGUgPSB0aXRsZTtcbiAgICB9XG4gICAgaWYgKHhtbE9iai5mZWVkLnVwZGF0ZWQpIHtcbiAgICAgIGZlZWQubGFzdEJ1aWxkRGF0ZSA9IHhtbE9iai5mZWVkLnVwZGF0ZWRbMF07XG4gICAgfVxuICAgIGZlZWQuaXRlbXMgPSAoeG1sT2JqLmZlZWQuZW50cnkgfHwgW10pLm1hcChlbnRyeSA9PiB0aGlzLnBhcnNlSXRlbUF0b20oZW50cnkpKTtcbiAgICByZXR1cm4gZmVlZDtcbiAgfVxuXG4gIHBhcnNlSXRlbUF0b20oZW50cnkpIHtcbiAgICBsZXQgaXRlbSA9IHt9O1xuICAgIHV0aWxzLmNvcHlGcm9tWE1MKGVudHJ5LCBpdGVtLCB0aGlzLm9wdGlvbnMuY3VzdG9tRmllbGRzLml0ZW0pO1xuICAgIGlmIChlbnRyeS50aXRsZSkge1xuICAgICAgbGV0IHRpdGxlID0gZW50cnkudGl0bGVbMF0gfHwgJyc7XG4gICAgICBpZiAodGl0bGUuXykgdGl0bGUgPSB0aXRsZS5fO1xuICAgICAgaWYgKHRpdGxlKSBpdGVtLnRpdGxlID0gdGl0bGU7XG4gICAgfVxuICAgIGlmIChlbnRyeS5saW5rICYmIGVudHJ5LmxpbmsubGVuZ3RoKSB7XG4gICAgICBpdGVtLmxpbmsgPSB1dGlscy5nZXRMaW5rKGVudHJ5LmxpbmssICdhbHRlcm5hdGUnLCAwKTtcbiAgICB9XG4gICAgaWYgKGVudHJ5LnB1Ymxpc2hlZCAmJiBlbnRyeS5wdWJsaXNoZWQubGVuZ3RoICYmIGVudHJ5LnB1Ymxpc2hlZFswXS5sZW5ndGgpIGl0ZW0ucHViRGF0ZSA9IG5ldyBEYXRlKGVudHJ5LnB1Ymxpc2hlZFswXSkudG9JU09TdHJpbmcoKTtcbiAgICBpZiAoIWl0ZW0ucHViRGF0ZSAmJiBlbnRyeS51cGRhdGVkICYmIGVudHJ5LnVwZGF0ZWQubGVuZ3RoICYmIGVudHJ5LnVwZGF0ZWRbMF0ubGVuZ3RoKSBpdGVtLnB1YkRhdGUgPSBuZXcgRGF0ZShlbnRyeS51cGRhdGVkWzBdKS50b0lTT1N0cmluZygpO1xuICAgIGlmIChlbnRyeS5hdXRob3IgJiYgZW50cnkuYXV0aG9yLmxlbmd0aCAmJiBlbnRyeS5hdXRob3JbMF0ubmFtZSAmJiBlbnRyeS5hdXRob3JbMF0ubmFtZS5sZW5ndGgpIGl0ZW0uYXV0aG9yID0gZW50cnkuYXV0aG9yWzBdLm5hbWVbMF07XG4gICAgaWYgKGVudHJ5LmNvbnRlbnQgJiYgZW50cnkuY29udGVudC5sZW5ndGgpIHtcbiAgICAgIGl0ZW0uY29udGVudCA9IHV0aWxzLmdldENvbnRlbnQoZW50cnkuY29udGVudFswXSk7XG4gICAgICBpdGVtLmNvbnRlbnRTbmlwcGV0ID0gdXRpbHMuZ2V0U25pcHBldChpdGVtLmNvbnRlbnQpXG4gICAgfVxuICAgIGlmIChlbnRyeS5zdW1tYXJ5ICYmIGVudHJ5LnN1bW1hcnkubGVuZ3RoKSB7XG4gICAgICBpdGVtLnN1bW1hcnkgPSB1dGlscy5nZXRDb250ZW50KGVudHJ5LnN1bW1hcnlbMF0pO1xuICAgIH1cbiAgICBpZiAoZW50cnkuaWQpIHtcbiAgICAgIGl0ZW0uaWQgPSBlbnRyeS5pZFswXTtcbiAgICB9XG4gICAgdGhpcy5zZXRJU09EYXRlKGl0ZW0pO1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgYnVpbGRSU1MwXzkoeG1sT2JqKSB7XG4gICAgdmFyIGNoYW5uZWwgPSB4bWxPYmoucnNzLmNoYW5uZWxbMF07XG4gICAgdmFyIGl0ZW1zID0gY2hhbm5lbC5pdGVtO1xuICAgIHJldHVybiB0aGlzLmJ1aWxkUlNTKGNoYW5uZWwsIGl0ZW1zKTtcbiAgfVxuXG4gIGJ1aWxkUlNTMSh4bWxPYmopIHtcbiAgICB4bWxPYmogPSB4bWxPYmpbJ3JkZjpSREYnXTtcbiAgICBsZXQgY2hhbm5lbCA9IHhtbE9iai5jaGFubmVsWzBdO1xuICAgIGxldCBpdGVtcyA9IHhtbE9iai5pdGVtO1xuICAgIHJldHVybiB0aGlzLmJ1aWxkUlNTKGNoYW5uZWwsIGl0ZW1zKTtcbiAgfVxuXG4gIGJ1aWxkUlNTMih4bWxPYmopIHtcbiAgICBsZXQgY2hhbm5lbCA9IHhtbE9iai5yc3MuY2hhbm5lbFswXTtcbiAgICBsZXQgaXRlbXMgPSBjaGFubmVsLml0ZW07XG4gICAgbGV0IGZlZWQgPSB0aGlzLmJ1aWxkUlNTKGNoYW5uZWwsIGl0ZW1zKTtcbiAgICBpZiAoeG1sT2JqLnJzcy4kICYmIHhtbE9iai5yc3MuJFsneG1sbnM6aXR1bmVzJ10pIHtcbiAgICAgIHRoaXMuZGVjb3JhdGVJdHVuZXMoZmVlZCwgY2hhbm5lbCk7XG4gICAgfVxuICAgIHJldHVybiBmZWVkO1xuICB9XG5cbiAgYnVpbGRSU1MoY2hhbm5lbCwgaXRlbXMpIHtcbiAgICBpdGVtcyA9IGl0ZW1zIHx8IFtdO1xuICAgIGxldCBmZWVkID0ge2l0ZW1zOiBbXX07XG4gICAgbGV0IGZlZWRGaWVsZHMgPSBmaWVsZHMuZmVlZC5jb25jYXQodGhpcy5vcHRpb25zLmN1c3RvbUZpZWxkcy5mZWVkKTtcbiAgICBsZXQgaXRlbUZpZWxkcyA9IGZpZWxkcy5pdGVtLmNvbmNhdCh0aGlzLm9wdGlvbnMuY3VzdG9tRmllbGRzLml0ZW0pO1xuICAgIGlmIChjaGFubmVsWydhdG9tOmxpbmsnXSAmJiBjaGFubmVsWydhdG9tOmxpbmsnXVswXSAmJiBjaGFubmVsWydhdG9tOmxpbmsnXVswXS4kKSB7XG4gICAgICBmZWVkLmZlZWRVcmwgPSBjaGFubmVsWydhdG9tOmxpbmsnXVswXS4kLmhyZWY7XG4gICAgfVxuICAgIGlmIChjaGFubmVsLmltYWdlICYmIGNoYW5uZWwuaW1hZ2VbMF0gJiYgY2hhbm5lbC5pbWFnZVswXS51cmwpIHtcbiAgICAgIGZlZWQuaW1hZ2UgPSB7fTtcbiAgICAgIGxldCBpbWFnZSA9IGNoYW5uZWwuaW1hZ2VbMF07XG4gICAgICBpZiAoaW1hZ2UubGluaykgZmVlZC5pbWFnZS5saW5rID0gaW1hZ2UubGlua1swXTtcbiAgICAgIGlmIChpbWFnZS51cmwpIGZlZWQuaW1hZ2UudXJsID0gaW1hZ2UudXJsWzBdO1xuICAgICAgaWYgKGltYWdlLnRpdGxlKSBmZWVkLmltYWdlLnRpdGxlID0gaW1hZ2UudGl0bGVbMF07XG4gICAgICBpZiAoaW1hZ2Uud2lkdGgpIGZlZWQuaW1hZ2Uud2lkdGggPSBpbWFnZS53aWR0aFswXTtcbiAgICAgIGlmIChpbWFnZS5oZWlnaHQpIGZlZWQuaW1hZ2UuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0WzBdO1xuICAgIH1cbiAgICBjb25zdCBwYWdpbmF0aW9uTGlua3MgPSB0aGlzLmdlbmVyYXRlUGFnaW5hdGlvbkxpbmtzKGNoYW5uZWwpO1xuICAgIGlmIChPYmplY3Qua2V5cyhwYWdpbmF0aW9uTGlua3MpLmxlbmd0aCkge1xuICAgICAgZmVlZC5wYWdpbmF0aW9uTGlua3MgPSBwYWdpbmF0aW9uTGlua3M7XG4gICAgfVxuICAgIHV0aWxzLmNvcHlGcm9tWE1MKGNoYW5uZWwsIGZlZWQsIGZlZWRGaWVsZHMpO1xuICAgIGZlZWQuaXRlbXMgPSBpdGVtcy5tYXAoeG1sSXRlbSA9PiB0aGlzLnBhcnNlSXRlbVJzcyh4bWxJdGVtLCBpdGVtRmllbGRzKSk7XG4gICAgcmV0dXJuIGZlZWQ7XG4gIH1cblxuICBwYXJzZUl0ZW1Sc3MoeG1sSXRlbSwgaXRlbUZpZWxkcykge1xuICAgIGxldCBpdGVtID0ge307XG4gICAgdXRpbHMuY29weUZyb21YTUwoeG1sSXRlbSwgaXRlbSwgaXRlbUZpZWxkcyk7XG4gICAgaWYgKHhtbEl0ZW0uZW5jbG9zdXJlKSB7XG4gICAgICBpdGVtLmVuY2xvc3VyZSA9IHhtbEl0ZW0uZW5jbG9zdXJlWzBdLiQ7XG4gICAgfVxuICAgIGlmICh4bWxJdGVtLmRlc2NyaXB0aW9uKSB7XG4gICAgICBpdGVtLmNvbnRlbnQgPSB1dGlscy5nZXRDb250ZW50KHhtbEl0ZW0uZGVzY3JpcHRpb25bMF0pO1xuICAgICAgaXRlbS5jb250ZW50U25pcHBldCA9IHV0aWxzLmdldFNuaXBwZXQoaXRlbS5jb250ZW50KTtcbiAgICB9XG4gICAgaWYgKHhtbEl0ZW0uZ3VpZCkge1xuICAgICAgaXRlbS5ndWlkID0geG1sSXRlbS5ndWlkWzBdO1xuICAgICAgaWYgKGl0ZW0uZ3VpZC5fKSBpdGVtLmd1aWQgPSBpdGVtLmd1aWQuXztcbiAgICB9XG4gICAgaWYgKHhtbEl0ZW0uJCAmJiB4bWxJdGVtLiRbJ3JkZjphYm91dCddKSB7XG4gICAgICBpdGVtWydyZGY6YWJvdXQnXSA9IHhtbEl0ZW0uJFsncmRmOmFib3V0J11cbiAgICB9XG4gICAgaWYgKHhtbEl0ZW0uY2F0ZWdvcnkpIGl0ZW0uY2F0ZWdvcmllcyA9IHhtbEl0ZW0uY2F0ZWdvcnk7XG4gICAgdGhpcy5zZXRJU09EYXRlKGl0ZW0pO1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBpVHVuZXMgc3BlY2lmaWMgZmllbGRzIGZyb20gWE1MIHRvIGV4dHJhY3RlZCBKU09OXG4gICAqXG4gICAqIEBhY2Nlc3MgcHVibGljXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmZWVkIGV4dHJhY3RlZFxuICAgKiBAcGFyYW0ge29iamVjdH0gY2hhbm5lbCBwYXJzZWQgWE1MXG4gICAqL1xuICBkZWNvcmF0ZUl0dW5lcyhmZWVkLCBjaGFubmVsKSB7XG4gICAgbGV0IGl0ZW1zID0gY2hhbm5lbC5pdGVtIHx8IFtdO1xuICAgIGxldCBjYXRlZ29yaWVzID0gW107XG4gICAgZmVlZC5pdHVuZXMgPSB7fVxuXG4gICAgaWYgKGNoYW5uZWxbJ2l0dW5lczpvd25lciddKSB7XG4gICAgICBsZXQgb3duZXIgPSB7fTtcblxuICAgICAgaWYoY2hhbm5lbFsnaXR1bmVzOm93bmVyJ11bMF1bJ2l0dW5lczpuYW1lJ10pIHtcbiAgICAgICAgb3duZXIubmFtZSA9IGNoYW5uZWxbJ2l0dW5lczpvd25lciddWzBdWydpdHVuZXM6bmFtZSddWzBdO1xuICAgICAgfVxuICAgICAgaWYoY2hhbm5lbFsnaXR1bmVzOm93bmVyJ11bMF1bJ2l0dW5lczplbWFpbCddKSB7XG4gICAgICAgIG93bmVyLmVtYWlsID0gY2hhbm5lbFsnaXR1bmVzOm93bmVyJ11bMF1bJ2l0dW5lczplbWFpbCddWzBdO1xuICAgICAgfVxuICAgICAgZmVlZC5pdHVuZXMub3duZXIgPSBvd25lcjtcbiAgICB9XG5cbiAgICBpZiAoY2hhbm5lbFsnaXR1bmVzOmltYWdlJ10pIHtcbiAgICAgIGxldCBpbWFnZTtcbiAgICAgIGxldCBoYXNJbWFnZUhyZWYgPSAoY2hhbm5lbFsnaXR1bmVzOmltYWdlJ11bMF0gJiZcbiAgICAgICAgY2hhbm5lbFsnaXR1bmVzOmltYWdlJ11bMF0uJCAmJlxuICAgICAgICBjaGFubmVsWydpdHVuZXM6aW1hZ2UnXVswXS4kLmhyZWYpO1xuICAgICAgaW1hZ2UgPSBoYXNJbWFnZUhyZWYgPyBjaGFubmVsWydpdHVuZXM6aW1hZ2UnXVswXS4kLmhyZWYgOiBudWxsO1xuICAgICAgaWYgKGltYWdlKSB7XG4gICAgICAgIGZlZWQuaXR1bmVzLmltYWdlID0gaW1hZ2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoYW5uZWxbJ2l0dW5lczpjYXRlZ29yeSddKSB7XG4gICAgICBjb25zdCBjYXRlZ29yaWVzV2l0aFN1YnMgPSBjaGFubmVsWydpdHVuZXM6Y2F0ZWdvcnknXS5tYXAoKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogY2F0ZWdvcnkgJiYgY2F0ZWdvcnkuJCAmJiBjYXRlZ29yeS4kLnRleHQsXG4gICAgICAgICAgc3ViczogY2F0ZWdvcnlbJ2l0dW5lczpjYXRlZ29yeSddID9cbiAgICAgICAgICAgIGNhdGVnb3J5WydpdHVuZXM6Y2F0ZWdvcnknXVxuICAgICAgICAgICAgICAubWFwKChzdWJjYXRlZ29yeSkgPT4gKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBzdWJjYXRlZ29yeSAmJiBzdWJjYXRlZ29yeS4kICYmIHN1YmNhdGVnb3J5LiQudGV4dFxuICAgICAgICAgICAgICB9KSkgOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGZlZWQuaXR1bmVzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzV2l0aFN1YnMubWFwKChjYXRlZ29yeSkgPT4gY2F0ZWdvcnkubmFtZSk7XG4gICAgICBmZWVkLml0dW5lcy5jYXRlZ29yaWVzV2l0aFN1YnMgPSBjYXRlZ29yaWVzV2l0aFN1YnM7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5uZWxbJ2l0dW5lczprZXl3b3JkcyddKSB7XG4gICAgICBpZiAoY2hhbm5lbFsnaXR1bmVzOmtleXdvcmRzJ10ubGVuZ3RoID4gMSkge1xuICAgICAgICBmZWVkLml0dW5lcy5rZXl3b3JkcyA9IGNoYW5uZWxbJ2l0dW5lczprZXl3b3JkcyddLm1hcChcbiAgICAgICAgICBrZXl3b3JkID0+IGtleXdvcmQgJiYga2V5d29yZC4kICYmIGtleXdvcmQuJC50ZXh0XG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQga2V5d29yZHMgPSBjaGFubmVsWydpdHVuZXM6a2V5d29yZHMnXVswXTtcbiAgICAgICAgaWYgKGtleXdvcmRzICYmIHR5cGVvZiBrZXl3b3Jkcy5fID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGtleXdvcmRzID0ga2V5d29yZHMuXztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXl3b3JkcyAmJiBrZXl3b3Jkcy4kICYmIGtleXdvcmRzLiQudGV4dCkge1xuICAgICAgICAgIGZlZWQuaXR1bmVzLmtleXdvcmRzID0ga2V5d29yZHMuJC50ZXh0LnNwbGl0KCcsJylcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Yga2V5d29yZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBmZWVkLml0dW5lcy5rZXl3b3JkcyA9IGtleXdvcmRzLnNwbGl0KCcsJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5jb3B5RnJvbVhNTChjaGFubmVsLCBmZWVkLml0dW5lcywgZmllbGRzLnBvZGNhc3RGZWVkKTtcbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgbGV0IGVudHJ5ID0gZmVlZC5pdGVtc1tpbmRleF07XG4gICAgICBlbnRyeS5pdHVuZXMgPSB7fTtcbiAgICAgIHV0aWxzLmNvcHlGcm9tWE1MKGl0ZW0sIGVudHJ5Lml0dW5lcywgZmllbGRzLnBvZGNhc3RJdGVtKTtcbiAgICAgIGxldCBpbWFnZSA9IGl0ZW1bJ2l0dW5lczppbWFnZSddO1xuICAgICAgaWYgKGltYWdlICYmIGltYWdlWzBdICYmIGltYWdlWzBdLiQgJiYgaW1hZ2VbMF0uJC5ocmVmKSB7XG4gICAgICAgIGVudHJ5Lml0dW5lcy5pbWFnZSA9IGltYWdlWzBdLiQuaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldElTT0RhdGUoaXRlbSkge1xuICAgIGxldCBkYXRlID0gaXRlbS5wdWJEYXRlIHx8IGl0ZW0uZGF0ZTtcbiAgICBpZiAoZGF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaXRlbS5pc29EYXRlID0gbmV3IERhdGUoZGF0ZS50cmltKCkpLnRvSVNPU3RyaW5nKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElnbm9yZSBiYWQgZGF0ZSBmb3JtYXRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgcGFnaW5hdGlvbiBvYmplY3Qgd2hlcmUgdGhlIHJlbCBhdHRyaWJ1dGUgaXMgdGhlIGtleSBhbmQgaHJlZiBhdHRyaWJ1dGUgaXMgdGhlIHZhbHVlXG4gICAqICB7IHNlbGY6ICdzZWxmLXVybCcsIGZpcnN0OiAnZmlyc3QtdXJsJywgLi4uICB9XG4gICAqXG4gICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2hhbm5lbCBwYXJzZWQgWE1MXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBnZW5lcmF0ZVBhZ2luYXRpb25MaW5rcyhjaGFubmVsKSB7XG4gICAgaWYgKCFjaGFubmVsWydhdG9tOmxpbmsnXSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCBwYWdpbmF0aW9uUmVsQXR0cmlidXRlcyA9IFsnc2VsZicsICdmaXJzdCcsICduZXh0JywgJ3ByZXYnLCAnbGFzdCddO1xuXG4gICAgcmV0dXJuIGNoYW5uZWxbJ2F0b206bGluayddLnJlZHVjZSgocGFnaW5hdGlvbkxpbmtzLCBsaW5rKSA9PiB7XG4gICAgICBpZiAoIWxpbmsuJCB8fCAhcGFnaW5hdGlvblJlbEF0dHJpYnV0ZXMuaW5jbHVkZXMobGluay4kLnJlbCkpIHtcbiAgICAgICAgcmV0dXJuIHBhZ2luYXRpb25MaW5rcztcbiAgICAgIH1cbiAgICAgIHBhZ2luYXRpb25MaW5rc1tsaW5rLiQucmVsXSA9IGxpbmsuJC5ocmVmO1xuICAgICAgcmV0dXJuIHBhZ2luYXRpb25MaW5rcztcbiAgICB9LCB7fSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG4iXSwibmFtZXMiOlsiaHR0cCIsInJlcXVpcmUiLCJodHRwcyIsInhtbDJqcyIsInVybCIsImZpZWxkcyIsInV0aWxzIiwiREVGQVVMVF9IRUFERVJTIiwiREVGQVVMVF9NQVhfUkVESVJFQ1RTIiwiREVGQVVMVF9USU1FT1VUIiwiUGFyc2VyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiaGVhZGVycyIsImN1c3RvbUZpZWxkcyIsIml0ZW0iLCJmZWVkIiwicmVxdWVzdE9wdGlvbnMiLCJtYXhSZWRpcmVjdHMiLCJ0aW1lb3V0IiwieG1sUGFyc2VyIiwicGFyc2VTdHJpbmciLCJ4bWwiLCJjYWxsYmFjayIsInByb20iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsInJlc3VsdCIsIkVycm9yIiwiYnVpbGRBdG9tRmVlZCIsInJzcyIsIiQiLCJ2ZXJzaW9uIiwibWF0Y2giLCJidWlsZFJTUzIiLCJidWlsZFJTUzEiLCJidWlsZFJTUzBfOSIsImRlZmF1bHRSU1MiLCJtYXliZVByb21pc2lmeSIsInBhcnNlVVJMIiwiZmVlZFVybCIsInJlZGlyZWN0Q291bnQiLCJnZXQiLCJpbmRleE9mIiwidXJsUGFydHMiLCJwYXJzZSIsIk9iamVjdCIsImFzc2lnbiIsInJlcXVlc3RPcHRzIiwicmVxIiwicmVzIiwic3RhdHVzQ29kZSIsIm5ld0xvY2F0aW9uIiwidGhlbiIsImVuY29kaW5nIiwiZ2V0RW5jb2RpbmdGcm9tQ29udGVudFR5cGUiLCJzZXRFbmNvZGluZyIsIm9uIiwiY2h1bmsiLCJzZXRUaW1lb3V0IiwiZGF0YSIsImNsZWFyVGltZW91dCIsImUiLCJ4bWxPYmoiLCJpdGVtcyIsImNvcHlGcm9tWE1MIiwibGluayIsImdldExpbmsiLCJ0aXRsZSIsIl8iLCJ1cGRhdGVkIiwibGFzdEJ1aWxkRGF0ZSIsImVudHJ5IiwibWFwIiwicGFyc2VJdGVtQXRvbSIsImxlbmd0aCIsInB1Ymxpc2hlZCIsInB1YkRhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJhdXRob3IiLCJuYW1lIiwiY29udGVudCIsImdldENvbnRlbnQiLCJjb250ZW50U25pcHBldCIsImdldFNuaXBwZXQiLCJzdW1tYXJ5IiwiaWQiLCJzZXRJU09EYXRlIiwiY2hhbm5lbCIsImJ1aWxkUlNTIiwiZGVjb3JhdGVJdHVuZXMiLCJmZWVkRmllbGRzIiwiY29uY2F0IiwiaXRlbUZpZWxkcyIsImhyZWYiLCJpbWFnZSIsIndpZHRoIiwiaGVpZ2h0IiwicGFnaW5hdGlvbkxpbmtzIiwiZ2VuZXJhdGVQYWdpbmF0aW9uTGlua3MiLCJrZXlzIiwieG1sSXRlbSIsInBhcnNlSXRlbVJzcyIsImVuY2xvc3VyZSIsImRlc2NyaXB0aW9uIiwiZ3VpZCIsImNhdGVnb3J5IiwiY2F0ZWdvcmllcyIsIml0dW5lcyIsIm93bmVyIiwiZW1haWwiLCJoYXNJbWFnZUhyZWYiLCJjYXRlZ29yaWVzV2l0aFN1YnMiLCJ0ZXh0Iiwic3VicyIsInN1YmNhdGVnb3J5Iiwia2V5d29yZHMiLCJrZXl3b3JkIiwic3BsaXQiLCJwb2RjYXN0RmVlZCIsImZvckVhY2giLCJpbmRleCIsInBvZGNhc3RJdGVtIiwiZGF0ZSIsImlzb0RhdGUiLCJ0cmltIiwicGFnaW5hdGlvblJlbEF0dHJpYnV0ZXMiLCJyZWR1Y2UiLCJpbmNsdWRlcyIsInJlbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rss-parser/lib/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/rss-parser/lib/utils.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst utils = module.exports = {};\nconst entities = __webpack_require__(/*! entities */ \"(rsc)/./node_modules/entities/lib/index.js\");\nconst xml2js = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\nutils.stripHtml = function(str) {\n    str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, \"$1\\n$3\");\n    str = str.replace(/<(?:.|\\n)*?>/gm, \"\");\n    return str;\n};\nutils.getSnippet = function(str) {\n    return entities.decodeHTML(utils.stripHtml(str)).trim();\n};\nutils.getLink = function(links, rel, fallbackIdx) {\n    if (!links) return;\n    for(let i = 0; i < links.length; ++i){\n        if (links[i].$.rel === rel) return links[i].$.href;\n    }\n    if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n};\nutils.getContent = function(content) {\n    if (typeof content._ === \"string\") {\n        return content._;\n    } else if (typeof content === \"object\") {\n        let builder = new xml2js.Builder({\n            headless: true,\n            explicitRoot: true,\n            rootName: \"div\",\n            renderOpts: {\n                pretty: false\n            }\n        });\n        return builder.buildObject(content);\n    } else {\n        return content;\n    }\n};\nutils.copyFromXML = function(xml, dest, fields) {\n    fields.forEach(function(f) {\n        let from = f;\n        let to = f;\n        let options = {};\n        if (Array.isArray(f)) {\n            from = f[0];\n            to = f[1];\n            if (f.length > 2) {\n                options = f[2];\n            }\n        }\n        const { keepArray, includeSnippet } = options;\n        if (xml[from] !== undefined) {\n            dest[to] = keepArray ? xml[from] : xml[from][0];\n        }\n        if (dest[to] && typeof dest[to]._ === \"string\") {\n            dest[to] = dest[to]._;\n        }\n        if (includeSnippet && dest[to] && typeof dest[to] === \"string\") {\n            dest[to + \"Snippet\"] = utils.getSnippet(dest[to]);\n        }\n    });\n};\nutils.maybePromisify = function(callback, promise) {\n    if (!callback) return promise;\n    return promise.then((data)=>setTimeout(()=>callback(null, data)), (err)=>setTimeout(()=>callback(err)));\n};\nconst DEFAULT_ENCODING = \"utf8\";\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = [\n    \"ascii\",\n    \"utf8\",\n    \"utf16le\",\n    \"ucs2\",\n    \"base64\",\n    \"latin1\",\n    \"binary\",\n    \"hex\"\n];\nconst ENCODING_ALIASES = {\n    \"utf-8\": \"utf8\",\n    \"iso-8859-1\": \"latin1\"\n};\nutils.getEncodingFromContentType = function(contentType) {\n    contentType = contentType || \"\";\n    let match = contentType.match(ENCODING_REGEX);\n    let encoding = (match || [])[2] || \"\";\n    encoding = encoding.toLowerCase();\n    encoding = ENCODING_ALIASES[encoding] || encoding;\n    if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n        encoding = DEFAULT_ENCODING;\n    }\n    return encoding;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcnNzLXBhcnNlci9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLE9BQU9DLE9BQU8sR0FBRyxDQUFDO0FBQ2hDLE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDO0FBRXZCSixNQUFNTSxTQUFTLEdBQUcsU0FBU0MsR0FBRztJQUM1QkEsTUFBTUEsSUFBSUMsT0FBTyxDQUFDLG9GQUFvRjtJQUN0R0QsTUFBTUEsSUFBSUMsT0FBTyxDQUFDLGtCQUFrQjtJQUNwQyxPQUFPRDtBQUNUO0FBRUFQLE1BQU1TLFVBQVUsR0FBRyxTQUFTRixHQUFHO0lBQzdCLE9BQU9KLFNBQVNPLFVBQVUsQ0FBQ1YsTUFBTU0sU0FBUyxDQUFDQyxNQUFNSSxJQUFJO0FBQ3ZEO0FBRUFYLE1BQU1ZLE9BQU8sR0FBRyxTQUFTQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsV0FBVztJQUM5QyxJQUFJLENBQUNGLE9BQU87SUFDWixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUgsTUFBTUksTUFBTSxFQUFFLEVBQUVELEVBQUc7UUFDckMsSUFBSUgsS0FBSyxDQUFDRyxFQUFFLENBQUNFLENBQUMsQ0FBQ0osR0FBRyxLQUFLQSxLQUFLLE9BQU9ELEtBQUssQ0FBQ0csRUFBRSxDQUFDRSxDQUFDLENBQUNDLElBQUk7SUFDcEQ7SUFDQSxJQUFJTixLQUFLLENBQUNFLFlBQVksRUFBRSxPQUFPRixLQUFLLENBQUNFLFlBQVksQ0FBQ0csQ0FBQyxDQUFDQyxJQUFJO0FBQzFEO0FBRUFuQixNQUFNb0IsVUFBVSxHQUFHLFNBQVNDLE9BQU87SUFDakMsSUFBSSxPQUFPQSxRQUFRQyxDQUFDLEtBQUssVUFBVTtRQUNqQyxPQUFPRCxRQUFRQyxDQUFDO0lBQ2xCLE9BQU8sSUFBSSxPQUFPRCxZQUFZLFVBQVU7UUFDdEMsSUFBSUUsVUFBVSxJQUFJbEIsT0FBT21CLE9BQU8sQ0FBQztZQUFDQyxVQUFVO1lBQU1DLGNBQWM7WUFBTUMsVUFBVTtZQUFPQyxZQUFZO2dCQUFDQyxRQUFRO1lBQUs7UUFBQztRQUNsSCxPQUFPTixRQUFRTyxXQUFXLENBQUNUO0lBQzdCLE9BQU87UUFDTCxPQUFPQTtJQUNUO0FBQ0Y7QUFFQXJCLE1BQU0rQixXQUFXLEdBQUcsU0FBU0MsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDNUNBLE9BQU9DLE9BQU8sQ0FBQyxTQUFTQyxDQUFDO1FBQ3ZCLElBQUlDLE9BQU9EO1FBQ1gsSUFBSUUsS0FBS0Y7UUFDVCxJQUFJRyxVQUFVLENBQUM7UUFDZixJQUFJQyxNQUFNQyxPQUFPLENBQUNMLElBQUk7WUFDcEJDLE9BQU9ELENBQUMsQ0FBQyxFQUFFO1lBQ1hFLEtBQUtGLENBQUMsQ0FBQyxFQUFFO1lBQ1QsSUFBSUEsRUFBRW5CLE1BQU0sR0FBRyxHQUFHO2dCQUNoQnNCLFVBQVVILENBQUMsQ0FBQyxFQUFFO1lBQ2hCO1FBQ0Y7UUFDQSxNQUFNLEVBQUVNLFNBQVMsRUFBRUMsY0FBYyxFQUFFLEdBQUdKO1FBQ3RDLElBQUlQLEdBQUcsQ0FBQ0ssS0FBSyxLQUFLTyxXQUFVO1lBQzFCWCxJQUFJLENBQUNLLEdBQUcsR0FBR0ksWUFBWVYsR0FBRyxDQUFDSyxLQUFLLEdBQUdMLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDLEVBQUU7UUFDakQ7UUFDQSxJQUFJSixJQUFJLENBQUNLLEdBQUcsSUFBSSxPQUFPTCxJQUFJLENBQUNLLEdBQUcsQ0FBQ2hCLENBQUMsS0FBSyxVQUFVO1lBQzlDVyxJQUFJLENBQUNLLEdBQUcsR0FBQ0wsSUFBSSxDQUFDSyxHQUFHLENBQUNoQixDQUFDO1FBQ3JCO1FBQ0EsSUFBSXFCLGtCQUFrQlYsSUFBSSxDQUFDSyxHQUFHLElBQUksT0FBT0wsSUFBSSxDQUFDSyxHQUFHLEtBQUssVUFBVTtZQUM5REwsSUFBSSxDQUFDSyxLQUFLLFVBQVUsR0FBR3RDLE1BQU1TLFVBQVUsQ0FBQ3dCLElBQUksQ0FBQ0ssR0FBRztRQUNsRDtJQUNGO0FBQ0Y7QUFFQXRDLE1BQU02QyxjQUFjLEdBQUcsU0FBU0MsUUFBUSxFQUFFQyxPQUFPO0lBQy9DLElBQUksQ0FBQ0QsVUFBVSxPQUFPQztJQUN0QixPQUFPQSxRQUFRQyxJQUFJLENBQ2pCQyxDQUFBQSxPQUFRQyxXQUFXLElBQU1KLFNBQVMsTUFBTUcsUUFDeENFLENBQUFBLE1BQU9ELFdBQVcsSUFBTUosU0FBU0s7QUFFckM7QUFFQSxNQUFNQyxtQkFBbUI7QUFDekIsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLHNCQUFzQjtJQUFDO0lBQVM7SUFBUTtJQUFXO0lBQVE7SUFBVTtJQUFVO0lBQVU7Q0FBTTtBQUNyRyxNQUFNQyxtQkFBbUI7SUFDdkIsU0FBUztJQUNULGNBQWM7QUFDaEI7QUFFQXZELE1BQU13RCwwQkFBMEIsR0FBRyxTQUFTQyxXQUFXO0lBQ3JEQSxjQUFjQSxlQUFlO0lBQzdCLElBQUlDLFFBQVFELFlBQVlDLEtBQUssQ0FBQ0w7SUFDOUIsSUFBSU0sV0FBVyxDQUFDRCxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSTtJQUNuQ0MsV0FBV0EsU0FBU0MsV0FBVztJQUMvQkQsV0FBV0osZ0JBQWdCLENBQUNJLFNBQVMsSUFBSUE7SUFDekMsSUFBSSxDQUFDQSxZQUFZTCxvQkFBb0JPLE9BQU8sQ0FBQ0YsY0FBYyxDQUFDLEdBQUc7UUFDN0RBLFdBQVdQO0lBQ2I7SUFDQSxPQUFPTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmFjdC1jaGVja2VyLy4vbm9kZV9tb2R1bGVzL3Jzcy1wYXJzZXIvbGliL3V0aWxzLmpzPzU0NWMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdXRpbHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuY29uc3QgZW50aXRpZXMgPSByZXF1aXJlKCdlbnRpdGllcycpO1xuY29uc3QgeG1sMmpzID0gcmVxdWlyZSgneG1sMmpzJyk7XG5cbnV0aWxzLnN0cmlwSHRtbCA9IGZ1bmN0aW9uKHN0cikge1xuICBzdHIgPSBzdHIucmVwbGFjZSgvKFteXFxuXSk8XFwvPyhofGJyfHB8dWx8b2x8bGl8YmxvY2txdW90ZXxzZWN0aW9ufHRhYmxlfHRyfGRpdikoPzoufFxcbikqPz4oW15cXG5dKS9nbSwgJyQxXFxuJDMnKVxuICBzdHIgPSBzdHIucmVwbGFjZSgvPCg/Oi58XFxuKSo/Pi9nbSwgJycpO1xuICByZXR1cm4gc3RyO1xufVxuXG51dGlscy5nZXRTbmlwcGV0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBlbnRpdGllcy5kZWNvZGVIVE1MKHV0aWxzLnN0cmlwSHRtbChzdHIpKS50cmltKCk7XG59XG5cbnV0aWxzLmdldExpbmsgPSBmdW5jdGlvbihsaW5rcywgcmVsLCBmYWxsYmFja0lkeCkge1xuICBpZiAoIWxpbmtzKSByZXR1cm47XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobGlua3NbaV0uJC5yZWwgPT09IHJlbCkgcmV0dXJuIGxpbmtzW2ldLiQuaHJlZjtcbiAgfVxuICBpZiAobGlua3NbZmFsbGJhY2tJZHhdKSByZXR1cm4gbGlua3NbZmFsbGJhY2tJZHhdLiQuaHJlZjtcbn1cblxudXRpbHMuZ2V0Q29udGVudCA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgaWYgKHR5cGVvZiBjb250ZW50Ll8gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQuXztcbiAgfSBlbHNlIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBsZXQgYnVpbGRlciA9IG5ldyB4bWwyanMuQnVpbGRlcih7aGVhZGxlc3M6IHRydWUsIGV4cGxpY2l0Um9vdDogdHJ1ZSwgcm9vdE5hbWU6ICdkaXYnLCByZW5kZXJPcHRzOiB7cHJldHR5OiBmYWxzZX19KTtcbiAgICByZXR1cm4gYnVpbGRlci5idWlsZE9iamVjdChjb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxufVxuXG51dGlscy5jb3B5RnJvbVhNTCA9IGZ1bmN0aW9uKHhtbCwgZGVzdCwgZmllbGRzKSB7XG4gIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcbiAgICBsZXQgZnJvbSA9IGY7XG4gICAgbGV0IHRvID0gZjtcbiAgICBsZXQgb3B0aW9ucyA9IHt9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGYpKSB7XG4gICAgICBmcm9tID0gZlswXTtcbiAgICAgIHRvID0gZlsxXTtcbiAgICAgIGlmIChmLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgb3B0aW9ucyA9IGZbMl07XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsga2VlcEFycmF5LCBpbmNsdWRlU25pcHBldCB9ID0gb3B0aW9ucztcbiAgICBpZiAoeG1sW2Zyb21dICE9PSB1bmRlZmluZWQpe1xuICAgICAgZGVzdFt0b10gPSBrZWVwQXJyYXkgPyB4bWxbZnJvbV0gOiB4bWxbZnJvbV1bMF07XG4gICAgfVxuICAgIGlmIChkZXN0W3RvXSAmJiB0eXBlb2YgZGVzdFt0b10uXyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRlc3RbdG9dPWRlc3RbdG9dLl87XG4gICAgfVxuICAgIGlmIChpbmNsdWRlU25pcHBldCAmJiBkZXN0W3RvXSAmJiB0eXBlb2YgZGVzdFt0b10gPT09ICdzdHJpbmcnKSB7XG4gICAgICBkZXN0W3RvICsgJ1NuaXBwZXQnXSA9IHV0aWxzLmdldFNuaXBwZXQoZGVzdFt0b10pO1xuICAgIH1cbiAgfSlcbn1cblxudXRpbHMubWF5YmVQcm9taXNpZnkgPSBmdW5jdGlvbihjYWxsYmFjaywgcHJvbWlzZSkge1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gcHJvbWlzZTtcbiAgcmV0dXJuIHByb21pc2UudGhlbihcbiAgICBkYXRhID0+IHNldFRpbWVvdXQoKCkgPT4gY2FsbGJhY2sobnVsbCwgZGF0YSkpLFxuICAgIGVyciA9PiBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKGVycikpXG4gICk7XG59XG5cbmNvbnN0IERFRkFVTFRfRU5DT0RJTkcgPSAndXRmOCc7XG5jb25zdCBFTkNPRElOR19SRUdFWCA9IC8oZW5jb2Rpbmd8Y2hhcnNldClcXHMqPVxccyooXFxTKykvO1xuY29uc3QgU1VQUE9SVEVEX0VOQ09ESU5HUyA9IFsnYXNjaWknLCAndXRmOCcsICd1dGYxNmxlJywgJ3VjczInLCAnYmFzZTY0JywgJ2xhdGluMScsICdiaW5hcnknLCAnaGV4J107XG5jb25zdCBFTkNPRElOR19BTElBU0VTID0ge1xuICAndXRmLTgnOiAndXRmOCcsXG4gICdpc28tODg1OS0xJzogJ2xhdGluMScsXG59XG5cbnV0aWxzLmdldEVuY29kaW5nRnJvbUNvbnRlbnRUeXBlID0gZnVuY3Rpb24oY29udGVudFR5cGUpIHtcbiAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZSB8fCAnJztcbiAgbGV0IG1hdGNoID0gY29udGVudFR5cGUubWF0Y2goRU5DT0RJTkdfUkVHRVgpO1xuICBsZXQgZW5jb2RpbmcgPSAobWF0Y2ggfHwgW10pWzJdIHx8ICcnO1xuICBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGVuY29kaW5nID0gRU5DT0RJTkdfQUxJQVNFU1tlbmNvZGluZ10gfHwgZW5jb2Rpbmc7XG4gIGlmICghZW5jb2RpbmcgfHwgU1VQUE9SVEVEX0VOQ09ESU5HUy5pbmRleE9mKGVuY29kaW5nKSA9PT0gLTEpIHtcbiAgICBlbmNvZGluZyA9IERFRkFVTFRfRU5DT0RJTkc7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nO1xufVxuIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImVudGl0aWVzIiwicmVxdWlyZSIsInhtbDJqcyIsInN0cmlwSHRtbCIsInN0ciIsInJlcGxhY2UiLCJnZXRTbmlwcGV0IiwiZGVjb2RlSFRNTCIsInRyaW0iLCJnZXRMaW5rIiwibGlua3MiLCJyZWwiLCJmYWxsYmFja0lkeCIsImkiLCJsZW5ndGgiLCIkIiwiaHJlZiIsImdldENvbnRlbnQiLCJjb250ZW50IiwiXyIsImJ1aWxkZXIiLCJCdWlsZGVyIiwiaGVhZGxlc3MiLCJleHBsaWNpdFJvb3QiLCJyb290TmFtZSIsInJlbmRlck9wdHMiLCJwcmV0dHkiLCJidWlsZE9iamVjdCIsImNvcHlGcm9tWE1MIiwieG1sIiwiZGVzdCIsImZpZWxkcyIsImZvckVhY2giLCJmIiwiZnJvbSIsInRvIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImtlZXBBcnJheSIsImluY2x1ZGVTbmlwcGV0IiwidW5kZWZpbmVkIiwibWF5YmVQcm9taXNpZnkiLCJjYWxsYmFjayIsInByb21pc2UiLCJ0aGVuIiwiZGF0YSIsInNldFRpbWVvdXQiLCJlcnIiLCJERUZBVUxUX0VOQ09ESU5HIiwiRU5DT0RJTkdfUkVHRVgiLCJTVVBQT1JURURfRU5DT0RJTkdTIiwiRU5DT0RJTkdfQUxJQVNFUyIsImdldEVuY29kaW5nRnJvbUNvbnRlbnRUeXBlIiwiY29udGVudFR5cGUiLCJtYXRjaCIsImVuY29kaW5nIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rss-parser/lib/utils.js\n");

/***/ })

};
;